angular.module('myDataTable', []).directive("myDataTable", function () {
    return {
        require: "myDataTable",
        controller: function ($scope, $element, $attrs, $location, $window) {

            var getIdEditBtn = function (pid) {
                return  "myDT_"+$attrs.id+"_EditBtn_"+ pid;
            };

            var getIdRow = function (pid) {
                return  "myDT_"+$attrs.id+"_Row_"+ pid;
            };

            var getEditBtnTemplate = function (pid) {
                var sClick =  (pid? 'onclick="document.getElementById(\''+getIdEditBtn(pid)+'\').click()"' :'');
                var sClassBtn = $attrs.customBtnClass ? $attrs.customBtnClass : 'fa fa-pencil';
                return  '<button class="btn btn-primary"'+sClick+'><i class="'+sClassBtn+'"></i></button>';
            };

            var columns = [
                {
                    "class": "edit-table-cell",
                    "orderable": false,
                    "data": null,
                    "defaultContent": getEditBtnTemplate()
                }
            ];

            this.registraItem = function (data) {
                columns.splice(columns.length - 1, 0, {"data": data.name , "orderable": ((data.notOrderable != null && data.notOrderable == '') ? false : true) });
            };

            var elemento = $('#' + $attrs.id);
            var dataTable = null;

            var rows_selected = [];

            this.criaDataTable = function () {
                dataTable = elemento.DataTable({
                    //  dom: 'T clear rtip', //Remove filtro de pesquisa
                    //  "processing": true,
                    //  select: true,
                    //  "bLengthChange": false,
                    dom: 'T clear Brtip',
                    "orderCellsTop": true,
                    "pageLength": 5,
                    "lengthMenu": [[5, 10, 25, 50, 100], [5, 10, 25, 50, 100]],
                    "bProcessing": false,
                    "serverSide": true,

                    "ajax": $attrs.ajax,
                    "createdRow": function ( row, data, index ) {
                        if ($attrs.enablerBtnRowEdit){
                            var enablerEdit = data[$attrs.enablerBtnRowEdit] == 'true' || data[$attrs.enablerBtnRowEdit] == true
                            $('td', row).eq(columns.length - 1).find("button").css('display', enablerEdit? 'block' : 'none');
                        }

                        if ($attrs.enablerBtnRowCtl){
                            var enablerCtl = data[$attrs.enablerBtnRowCtl] == 'true' || data[$attrs.enablerBtnRowCtl] == true
                            $('td', row).eq(columns.length - 1).find("button").css('display', enablerCtl ? 'block' : 'none');
                        }

                    },
                    select: true,

                    buttons : new function (){
                        var btnsToolbar = [];

                        if($attrs.customButtonsToolbar){
                            var btns = jQuery.parseJSON($attrs.customButtonsToolbar.replace(/["']/g, "\""));

                            btns.forEach( function (btn) {

                                btnsToolbar.push(
                                    {
                                        text: '<i class="glyphicon '+ btn.icone +'"></i> '+ btn.descricao + '' ,
                                        className: 'btn dt-btn ' + btn.css +'',
                                        tag: 'input',
                                        enabled: false,
                                        action: function () {

                                            var selections = [];
                                            $.each(this.rows({selected: true}).data().toArray(), function (i, item) {
                                                selections[i] = item.id;
                                            });

                                            var fBtnDinamicaClick = $scope[btn.funcao];

                                            if(fBtnDinamicaClick){
                                                fBtnDinamicaClick(selections, this.rows({selected: true}).data().toArray());
                                            } else {
                                                console.log('É necessário implementar a função dinâmica '+ btn.fucao +'(ids) em sua controller para executar a operação desejada nos itens selecionados.');
                                            }
                                        }
                                    }
                                )

                            });
                        }

                        if($attrs.selectAll == ''){
                            btnsToolbar.push('selectAll');
                        }
                        if($attrs.selectNone == ''){
                            btnsToolbar.push('selectNone');
                        }
                        if($attrs.deleteAll == ''){
                            btnsToolbar.push(
                                {
                                    text: '<i class="glyphicon glyphicon-trash"></i> Excluir ',
                                    className: 'btn dt-btn btn-danger dt-btn-excluir',
                                    tag: 'input',
                                    enabled: false,
                                    action: function () {

                                        var selections = [];
                                        $.each(this.rows({selected: true}).data().toArray(), function (i, item) {
                                            selections[i] = item.id;
                                        });

                                        var fRemoverItensSelecionadosClick = $scope['deleteSeletions'];

                                        if(fRemoverItensSelecionadosClick){
                                            fRemoverItensSelecionadosClick(selections, this.rows({selected: true}).data().toArray());
                                        } else {
                                            console.log('É necessário implementar a função deleteSeletions(ids) em sua controller para excluir os itens selecionados.');
                                        }
                                    }
                                }
                            )
                        }
                        return btnsToolbar;
                    },

                    "fnRowCallback": function(nRow, aData, iDisplayIndex, iDisplayIndexFull) {
                        var id =aData.id;
                        var doClick = function () {
                            if ($attrs.customBtnCtl && $scope[$attrs.customBtnCtl]) {
                                var fClickc = $scope[$attrs.customBtnCtl];
                                fClickc(aData);
                                $scope.$apply();
                            } else if ($attrs.editCtl && $scope[$attrs.editCtl]) {
                                var fClick = $scope[$attrs.editCtl];
                                fClick(id);
                            }

                            if ($attrs.editUrl) {
                                if (/(#)/.test($attrs.editUrl)){
                                    var url = $attrs.editUrl.replace("#", "");
                                    $location.path(url).search({id: id});
                                    $window.location.href = $location.absUrl();
                                } else {
                                    $window.location.href = $attrs.editUrl;
                                }
                            }
                        }
                        if ($(nRow).find('button')){
                            $(nRow).find('button').prop('onclick', null).off('click');
                            $(nRow).find('button').on("click", doClick);

                            $(nRow).attr("id", getIdRow(aData.id));
                            $(nRow).find('button').attr("id", getIdEditBtn(aData.id));
                        }

                        return nRow;
                    },

                    "language": {
                        "sEmptyTable": "Nenhum registro encontrado",
                        "sInfo": "Mostrando de _START_ até _END_ de _TOTAL_ registros",
                        "sInfoEmpty": "Mostrando 0 até 0 de 0 registros",
                        "sInfoFiltered": "(Filtrados de _MAX_ registros)",
                        "sInfoPostFix": "",
                        "sInfoThousands": ".",
                        "sLengthMenu": "_MENU_ resultados por página",
                        "sZeroRecords": "Nenhum registro encontrado",
                        "sSearch": "Pesquisar",
                        "oPaginate": {
                            "sNext": "Próximo",
                            "sPrevious": "Anterior",
                            "sFirst": "Primeiro",
                            "sLast": "Último"
                        },
                        "oAria": {
                            "sSortAscending": ": Ordenar colunas de forma ascendente",
                            "sSortDescending": ": Ordenar colunas de forma descendente"
                        },
                        select: {
                            rows: { _: "Você selecionou %d linhas", 0: "Clique em uma linha para selecioná-la", 1: "Apenas 1 linha selecionada" }
                        },
                        buttons: {
                            selectAll: "<i class='fa fa-check-square-o' style='margin-right:4px;'></i> Selecionar todas",
                            selectNone: "<i class='fa fa-square-o' style='margin-right:4px;'></i> Deselecionar"
                        }
                    } ,
                    responsive: {
                        details: {
                            renderer: function ( api, rowIdx, columns ) {
                                var _data = dataTable.row( rowIdx ).data();
                                var data = $.map( columns, function ( col, i ) {
                                    var template = '';
                                    if (col.hidden){
                                        if (col.columnIndex != columns.length-1){
                                            template =  '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+
                                                '<td>'+ (col.title ? '<span class="dtr-title">'+ col.title+'</span>' :'') + '<span class="dtr-data">'+col.data+'</span>' + '</td>'+
                                                '</tr>';
                                        } else if (!$attrs.enablerBtnRowEdit || (_data[$attrs.enablerBtnRowEdit] == 'true' || _data[$attrs.enablerBtnRowEdit] == true)){
                                            template = '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+ '<td>'+ getBtnTemplate(_data.id) +'</td>'+ '</tr>';
                                        }else if (!$attrs.enablerBtnRowCtl || (_data[$attrs.enablerBtnRowCtl] == 'true' ||  _data[$attrs.enablerBtnRowCtl] == true)){
                                            template = '<tr data-dt-row="'+col.rowIndex+'" data-dt-column="'+col.columnIndex+'">'+ '<td>'+ getBtnTemplate(_data.id) +'</td>'+ '</tr>';
                                        }
                                    };
                                    return template;
                                } ).join('');
                                return data ? $('<table/>').append( data ) : false;
                            }
                        }
                    }
                    ,"columns": columns
                });

                // pesquisa com timout para diminuir o numero de requisicoes desnecessárias.
                var search = $.fn.dataTable.util.throttle(
                    function (that, val) {
                        that.search(val).draw();
                    }, 1000
                );

                dataTable.columns().every(function () {
                    var that = this;
                    var id = $(this.header()).attr("name") + "-search"
                    $("#" + id).on('keyup change', function () {
                        if (that.search() !== this.value) {
                            search(that, this.value);
                        }
                        if(this.value == "") {
                            search(that, "");
                        }
                    });
                });

                if(dataTable.buttons){

                    dataTable.on('select.dt deselect.dt', function() {
                        dataTable.buttons( ['.dt-buttons .dt-btn'] ).enable(
                            dataTable.rows( { selected: true } ).indexes().length === 0 ? false : true
                        )
                    })

                }
            }

        },
        link: function (scope, element, attr, ctrl) {
            ctrl.criaDataTable()
        }
    };
});
angular.module('myDataTable').directive("myDataTableItem", function () {
    return {
        require: "^myDataTable",
        link: function (scope, element, attr, ctrl) {
            ctrl.registraItem(attr);
        }
    };
});
